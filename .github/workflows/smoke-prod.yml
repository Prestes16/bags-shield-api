name: ci(prod): fumaÃƒÂ§a (condicional + tolerante 501/NOT_CONFIGURED)
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feat/v0-schemas-and-dev-server
jobs:
  smoke-prod:
    # SÃƒÂ³ roda se existir o secret (porta de seguranÃƒÂ§a),
    # mas o script abaixo trata 501/NOT_CONFIGURED como sucesso.
    if: ${{ secrets.BAGS_API_BASE != '' }}
    runs-on: windows-latest
    timeout-minutes: 10

    steps:
      - name: Probe /api/bags/token-info (PS)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # Base de prod: pode sobrescrever via Repository Variables (Settings > Variables)
          $base = '${{ vars.PROD_BASE_URL }}'
          if ([string]::IsNullOrWhiteSpace($base)) { $base = 'https://bags-shield-api.vercel.app' }
          $url  = "$base/api/bags/token-info"

          # RequisiÃƒÂ§ÃƒÂ£o Ã¢â‚¬Å“ÃƒÂ  prova de PS 5/7Ã¢â‚¬Â: HttpWebRequest captura 2xx/4xx/5xx sem explodir
          $enc = [System.Text.Encoding]::UTF8
          $req = [System.Net.HttpWebRequest]::Create($url)
          $req.Method = 'GET'
          $req.ContentLength = 0

<<<<<<< HEAD
          try {
            $resp = [System.Net.HttpWebResponse]$req.GetResponse()
          } catch [System.Net.WebException] {
            $resp = [System.Net.HttpWebResponse]$_.Exception.Response
          }
=======
          echo "::group::Warm-up /api/health"
          hc="000"; for i in $(seq 1 12); do
            hc=$(curl "${curl_opts[@]}" -o /dev/null -w '%{http_code}' "$alias/api/health" || echo 000)
            echo "try#$i health HTTP=$hc"
            [ "$hc" = "200" ] && break
            sleep 5
          done
          [ "$hc" = "200" ] || { echo "health != 200 apÃƒÆ’Ã‚Â³s retries"; exit 1; }
          echo "::endgroup::"
>>>>>>> 7777e76 (ci(prod): habilita workflow_dispatch e push na main (smoke-prod))

          if ($null -eq $resp) {
            Write-Host "Sem resposta do servidor Ã¢â‚¬â€ FAIL hard."
            exit 1
          }

<<<<<<< HEAD
          $code = [int]$resp.StatusCode
          $xrid = $resp.Headers['X-Request-Id']
          $sr   = New-Object System.IO.StreamReader($resp.GetResponseStream(), $enc)
          $body = $sr.ReadToEnd(); $sr.Close()
=======
          # AsserÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes finais (se chegou aqui, deve estar OK)
          ok=$(jq -r '.ok' body.txt)
          base=$(jq -r '.meta.baseUrlUsed' body.txt)
          test "$ok" = "true" || { echo "ok != true"; exit 1; }
          test "$base" = "$expect" || { echo "baseUrlUsed divergente: $base"; exit 1; }
>>>>>>> 7777e76 (ci(prod): habilita workflow_dispatch e push na main (smoke-prod))

          Write-Host "HTTP: $code"
          Write-Host "X-Request-Id: $xrid"

          # TolerÃƒÂ¢ncia: produÃƒÂ§ÃƒÂ£o sem BAGS_API_BASE configurado ainda
          if ($code -eq 501 -and ($body -match 'NOT_CONFIGURED')) {
            Write-Host "BAGS_API_BASE nÃƒÂ£o configurado em produÃƒÂ§ÃƒÂ£o Ã¢â‚¬â€ marcando como SUCESSO (skip suave)."
            exit 0
          }

          if ($code -ge 200 -and $code -lt 300) {
            Write-Host "OK 2xx Ã¢â‚¬â€ sucesso real."
            exit 0
          }

          Write-Host "Body (head):"
          $head = $body.Substring(0,[Math]::Min(500,$body.Length))
          Write-Host $head
          exit 1
