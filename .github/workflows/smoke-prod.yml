name: smoke-prod
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Smoke checks (prod, warm-up + retries)
        run: |
          set -euo pipefail
          alias="https://bags-shield-api.vercel.app"
          mint="So11111111111111111111111111111111111111112"
          expect="https://bags-shield-api-cleiton-prestes-s-projects.vercel.app/api/bags/mock"

          curl_opts=(--silent --show-error --connect-timeout 10 --max-time 20)

          echo "::group::Warm-up /api/health"
          hc="000"; for i in $(seq 1 12); do
            hc=$(curl "${curl_opts[@]}" -o /dev/null -w '%{http_code}' "$alias/api/health" || echo 000)
            echo "try#$i health HTTP=$hc"
            [ "$hc" = "200" ] && break
            sleep 5
          done
          [ "$hc" = "200" ] || { echo "health != 200 após retries"; exit 1; }
          echo "::endgroup::"

          echo "::group::GET /api/bags/token-info (retries)"
          code="000"
          for i in $(seq 1 12); do
            code=$(curl "${curl_opts[@]}" -D hdr.txt -o body.txt -w '%{http_code}' "$alias/api/bags/token-info?mint=$mint" || echo 000)
            first=$(head -n1 hdr.txt || true)
            ok=$(jq -r 'try .ok' body.txt 2>/dev/null || echo "null")
            base=$(jq -r 'try .meta.baseUrlUsed' body.txt 2>/dev/null || echo "null")
            echo "try#$i HTTP=$code | $first | ok=$ok | baseUrlUsed=$base"
            if [ "$code" = "200" ] && [ "$ok" = "true" ] && [ "$base" = "$expect" ]; then
              break
            fi
            sleep 5
          done

          if [ "$code" != "200" ]; then
            echo "=== HEADERS"; sed -n '1,200p' hdr.txt || true
            echo "=== BODY (primeiras linhas)"; sed -n '1,200p' body.txt || true
            exit 1
          fi
          echo "::endgroup::"

          # Asserções finais (se chegou aqui, deve estar OK)
          ok=$(jq -r '.ok' body.txt)
          base=$(jq -r '.meta.baseUrlUsed' body.txt)
          test "$ok" = "true" || { echo "ok != true"; exit 1; }
          test "$base" = "$expect" || { echo "baseUrlUsed divergente: $base"; exit 1; }

          echo "SMOKE OK"